En-Yu (Mike) Lee, elee353

Question 1

The free() function is not normally re-entrant and uses a static data structure to track free memory blocks.

The free() function call here should be used with caution as it can accidentally free the stack of a thread. This will corrupt the thread switching mechanism as the information stored in the stack will be permanently lost.

The free() function frees a proportion of memory for future use. However, it doesn't erase the content in those memory addresses. It is possible that future malloc() function calls reuse the addresses containing unerased content about stacks.
The free() function can also cause security concerns as the free() function can access the wrong portion of the memory unintentionally or accidentally.

This will cause bugs when these calls are used to create new threads.

Question 2

Pre-emption is the act of temporarily interrupting a task being carried out with the intention of resuming the task at a later time.

The time-consuming calculations are required to demonstrate the pre-emptive scheduling behaviour. The thread should not finish its tasks before it gets interrupted and gets switched to another thread.
The time-consuming calculations extend the time the thread required to process its tasks and hence allow the pre-emptive scheduling to happen before the thread finishes.

Question 3

If we don't block the signals before calling the rand() function, undefined behaviours of the rand() function can happen and duplicate and non-random numbers can be returned.

These strange behaviours can happen if we do not block the signals before calling the rand() function.
The function rand() is not reentrant, since it uses a hidden state that is modified on each call.
When a thread is interrupted, the rand() call can be frozen and the seed value may not be protected by encapsulation. Other threads may have access to this seed value concurrently. This is undesirable because if too many threads access this seed value it may run into a deadlock.
The deadlock is caused by multiple theads trying to access the same resource, and they are all waiting for each other to finish.
In addition, if the function rand() is called multiple times within a certain granularity period, the random number generator will be re-seeded with the same value.

