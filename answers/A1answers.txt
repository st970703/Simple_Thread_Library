En-Yu (Mike) Lee, elee353

Question 1
There is a comment saying " Wow! " in the switcher function in OSA1.c . This is to indicate something very bad is happening here. Explain what it is.

The free() function is not normally re-entrant and uses a static data structure to track free memory blocks.

The free() function call here should be used with caution as it can accidentally free the stack of a thread. This will corrupt the thread switching mechanism as the information stored in the stack will be permanently lost.

Question 2
Why are the time-consuming calculations in threads3.c required in order to demonstrate the effectiveness of the pre-emptive scheduler?

Pre-emption is the act of temporarily interrupting a task being carried out with the intention of resuming the task at a later time.

The time-consuming calculations are required to demonstrate the pre-emptive scheduling behaviour. The thread should not finish its tasks before it gets interrupted and gets switched to another thread.
The time-consuming calculations extend the time the thread required to process its tasks and hence allow the pre-emptive scheduling to happen before the thread finishes.

Question 3
In threads3.c there is some code around the call to rand() to block signals and then allow them again.
Explain what can happen if this is not done. Also give an explanation as to why this can happen.

The function rand() is not reentrant, since it uses a hidden state that is modified on each call. When a thread is interrupted, the rand() call is frozen and the seed value may not be protected by encapsulation. Other threads may have access to this seed value and non-random seed values can be returned.

In addition, if the function rand() is called multiple times within a certain granularity period, the random number generator will be re-seeded with the same value. Duplicate and non-random numbers can be returned.

This can happen if we do not block the signals before calling the rand() function. Duplicate and non-random numbers can be returned and this defeats the purpose of the rand() function.